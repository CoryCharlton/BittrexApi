class CombinedJavadocPlugin implements Plugin<Project> {

  static final String TASK_NAME = "generateCombinedJavadoc"

  @Override
  void apply(Project project) {
    project.gradle.projectsEvaluated {
      Set<Project> libraryModules = getLibraryModules(project)
      if (!libraryModules.isEmpty()) {
        String sdkDirectory = getSdkDirectory(libraryModules)
        project.task(TASK_NAME, type: Javadoc) {
          description = "Generates combined Javadoc."
          title = "Android Bittrex Api library"
          source = libraryModules.generateJavadoc.source
          classpath = project.files(libraryModules.generateJavadoc.classpath)
          destinationDir = project.file("$project.buildDir/docs/javadoc")
          options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "https://developer.android.com/reference", "${sdkDirectory}/docs/reference"
            encoding = "UTF-8"
          }
          exclude "**/BuildConfig.java"
          exclude "**/R.java"
          exclude "**/internal/**"
          destinationDir project.file("$project.buildDir/docs/javadoc")
          doLast {
              project.delete("${project.rootDir}/docs/reference");
              project.copy {
                from "${project.buildDir}/docs/javadoc"
                into "${project.rootDir}/docs/reference"
              }
          }
        }
      }
    }
  }

  // Returns Android library modules that declare a generateJavadoc task.
  private Set<Project> getLibraryModules(Project project) {
    project.subprojects.findAll {
      it.plugins.findPlugin("com.android.library") &&
      it.tasks.findByName("generateJavadoc")
    }
  }

  // Returns the Android SDK directory given a set of Android library modules.
  private String getSdkDirectory(Set<Project> libraryModules) {
    // We can retrieve the Android SDK directory from any module.
    return libraryModules.iterator().next().android.sdkDirectory
  }

}

apply plugin: CombinedJavadocPlugin